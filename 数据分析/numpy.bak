# 一、简介

### 什么是数据分析?
数据分析是指用适当的**统计分析方法**对收集来的大量数据进行分析，
**提取有用信息和形成结论**而**对数据加以详细研究和概括总结**的过程。

### 使用python做数据分析的常用库
1. `numpy`基础数值算法
2. `scipy`科学计算
3. `matplotlib`数据可视化
4. `pandas`序列高级函数

### numpy简介
1. `Numerical Python`，数值的`Python`，补充了`Python`语言所欠缺的数值计算能力。
2. `Numpy`是其它数据分析及机器学习库的底层库。
3. `Numpy`完全标准`C`语言实现，运行效率充分优化。
4. `Numpy`开源免费。

### numpy的核心: 多维数组
1. 代码简洁：减少`Python`代码中的循环。
2. 底层实现：厚内核(`C`)+薄接口(`Python`)，保证性能。

# 二、numpy基础

`numpy`提供了一个多维数组对象`ndarray`，使用`np.array()`进行构造

```python
import numpy as np

ary = np.array([1, 2, 3, 4, 5, 6])
print(ary, type(ary))  # [1 2 3 4 5 6] <class 'numpy.ndarray'>
```
### 内存中的`ndarray`对象

`ndarry`对象创建出来后，在内存中保存了两部分数据信息，**元数据**和**实际数据**

* 元数据(`metadata`): 存储对目标数组的**描述信息**，如：
  * `dim`: 维数
  * `shape`: 数据形状
  * `size`: 数据量
  * `dimensions`: 规模
  * `dtype`: 数据类型
  * `data`: 实际数据所在地址

* 实际数据: 完整的数组数据

将实际数据与元数据分开存放，**一方面提高了内存空间的使用效率，
另一方面减少对实际数据的访问频率，提高性能**

### 特点
1. `Numpy`数组是同质数组，即**所有元素的数据类型必须相同**

## 2.1 ndarray数组初体验

数组与一个数进行**四则运算**时，**运算规则是作用在数组的每个元素之上**。
```python
import numpy as np

ary = np.array([1, 2, 3, 4, 5, 6])
# 原始数据
print("原始数据    ", ary)      # 原始数据     [1 2 3 4 5 6]
# 加法
print("原始数据 + 2", ary + 2)  # 原始数据 + 2 [3 4 5 6 7 8]
# 减法
print("原始数据 - 2", ary - 2)  # 原始数据 - 2 [-1  0  1  2  3  4]
# 乘法
print("原始数据 * 2", ary * 2)  # 原始数据 * 2 [ 2  4  6  8 10 12]
# 除法
print("原始数据 / 2", ary / 2)  # 原始数据 / 2 [0.5 1.  1.5 2.  2.5 3. ]
# 幂运算
print("原始数据 ** 2", ary ** 2)# 原始数据 ** 2 [ 1  4  9 16 25 36]
# 取模
print("原始数据 % 2", ary % 2)  # 原始数据 % 2 [1 0 1 0 1 0]
```

数组与一个数做**比较运算**，**运算规则作用在每个元素之上**
```python
import numpy as np

ary = np.array([1, 2, 3, 4, 5, 6])
# 比较
print("原始数据 > 3", ary > 3)
print("原始数据 < 3", ary < 3)
print("原始数据 == 3", ary == 3)
print("原始数据 != 3", ary != 3)
```
输出结果为:
```
原始数据 > 3 [False False False  True  True  True]
原始数据 < 3 [ True  True False False False False]
原始数据 == 3 [False False  True False False False]
原始数据 != 3 [ True  True False  True  True  True]
```

数组与数组**运算**时，**运算规则作用在相同索引位置的元素之上**, **两个数组的维度必须一致**
```python
import numpy as np

ary = np.array([1, 2, 3, 4, 5, 6])

# 数组与数组进行运算
ary1 = ary
ary2 = np.array([7, 8, 9, 10, 11, 12])

print("ary1 + ary2", ary1 + ary2)
print("ary1 - ary2", ary1 - ary2)
print("ary1 * ary2", ary1 * ary2)
print("ary1 / ary2", ary1 / ary2)
print("ary1 % ary2", ary1 % ary2)
print("ary1 ** ary2", ary1 ** ary2)
print("ary1 > ary2", ary1 > ary2)
print("ary1 < ary2", ary1 < ary2)
```

## 2.2 创建`ndarray`对象
### 2.2.1 np.array(args: Any)
通过传入的参数构造一个数组，该参数可以时python的`list`，`tuple`等其他的数据类型
```python
import numpy as np

ary = np.array([1, 2, 3, 4, 5, 6])
print(ary)
```

### 2.2.2 np.arange(start, end, step)
生成一个有规律的元素数组
* `start`, 起始值，默认为0
* `end`, 终止值，生成的值不包含该值
* `step`, 步长，默认为1

```python
import numpy as np
ary = np.arange(0, 10, 2)
print(ary)
```

### 2.2.3 np.zeros(number, dtype)
生成一个元素全为`0`数组
* `number`, 元素个数, 或`shape`
* `dtype`, 数据类型

```python
import numpy as np

np.zeros(10, dtype=np.int8)
np.zeros(10, dtype=np.float16)
```

### 2.2.4 np.ones(number, dtype)
生成一个元素全为`1`的数组
* `number`, 元素个数, 或`shape`
* `dtype`, 数据类型

```python
import numpy as np

np.ones(10, dtype=np.int8)
np.ones(10, dtype=np.float16)
```

### 2.2.5 np.zeros_link(a:[ndarry, iterable, int, float], dtype)
生成一个形状像`a`数据元素全为`0`的数组
* `a`: ndarry对象，可迭代对象，int或float数据值
* `dtype`: 数据类型

```python
import numpy as np
np.zeros_like([1,2,3,4])
```

### 2.2.6 np.ones_like(a:[ndarray, iterable, int, float], dtype)
生成一个形状像`a`数据元素全为`1`的数组
* `a`: ndarry对象，可迭代对象，int或float数据值
* `dtype`: 数据类型

```python
import numpy as np
np.ones_like([1,2,3,4])
```

## 2.3 `ndarray`对象的属性基础访问
* 维度
* 形状
* 数据类型
* 数据元素个数
* 索引

### 2.3.1 `np.ndarray.ndim`维数
```python
import numpy as np

ary = np.arange(1, 11)
print(ary.ndim)  # 1

ary = np.array([
  [1,2,3],
  [4,5,6]
])
print(ary.ndim)  # 2
```
* `np.ndarray.ndim`: 返回`array`的维数

### 2.3.2 `np.ndarray.shape`维度
返回的数据维度，也即是**数据的行列数**
```python
import numpy as np
ary = np.arange(1, 11)
print(ary, ary.shape)  # [ 1  2  3  4  5  6  7  8  9 10] (10,)

ary = np.array([
  [1,2,3],
  [4,5,6]
])
print(ary, ary.shape)  # ary，(2, 3)
```
* `np.ndarray.shape`: 是一个元组, 表示数组的形状，可以进行修改

### 2.3.3 `np.ndarray.size`数据元素个数
该属性存放的是**数组数据元素的个数**，等于`shape`元组元素的乘积
```python
import numpy as np
ary = np.array([
    [1,2,3,4],
    [5,6,7,8]
])
# 观察维度，size，len的区别
print(ary.shape, ary.size, len(ary))  # (2, 4) 8 2
```
* `array.size`: 返回的数组元素个数
* `len(array)`: 返回的是最外层元素个数

### 2.3.4 `np.ndarray.dtype`数据类型
该属性存放的是**数组元素的数据类型**
```python
import numpy as np
ary = np.array([1, 2, 3, 4, 5, 6])
print(type(ary), ary, ary.dtype)
# 转换ary元素的类型
b = ary.astype(float)
print(type(b), b, b.dtype)
#转换ary元素的类型
c = ary.astype(str)
print(type(c), c, c.dtype)
```
* **不能对该属性进行直接修改**, 不同类型的数据在底层处理是不一样的。 修改数据类型需要调用
  `array.astype(dtype)`方法转换数据类型。

* `ar